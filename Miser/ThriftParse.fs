// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "ThriftParse.fsy"

open Ast

# 10 "ThriftParse.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | CONST
  | SEMICOLON
  | COMMA
  | NAMESPACE
  | INCLUDE
  | LITERAL of (string)
  | DECIMAL of (decimal)
  | BOOL of (bool)
  | NUMBER of (int64)
  | ID of (string)
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_CONST
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_NAMESPACE
    | TOKEN_INCLUDE
    | TOKEN_LITERAL
    | TOKEN_DECIMAL
    | TOKEN_BOOL
    | TOKEN_NUMBER
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Program
    | NONTERM_HeaderList
    | NONTERM_Header
    | NONTERM_Include
    | NONTERM_Literal
    | NONTERM_DefinitionList
    | NONTERM_Definition
    | NONTERM_Const
    | NONTERM_TypeDefinition
    | NONTERM_CommaOrSemicolonOptional

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | CONST  -> 1 
  | SEMICOLON  -> 2 
  | COMMA  -> 3 
  | NAMESPACE  -> 4 
  | INCLUDE  -> 5 
  | LITERAL _ -> 6 
  | DECIMAL _ -> 7 
  | BOOL _ -> 8 
  | NUMBER _ -> 9 
  | ID _ -> 10 
  | STRING _ -> 11 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_CONST 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_COMMA 
  | 4 -> TOKEN_NAMESPACE 
  | 5 -> TOKEN_INCLUDE 
  | 6 -> TOKEN_LITERAL 
  | 7 -> TOKEN_DECIMAL 
  | 8 -> TOKEN_BOOL 
  | 9 -> TOKEN_NUMBER 
  | 10 -> TOKEN_ID 
  | 11 -> TOKEN_STRING 
  | 14 -> TOKEN_end_of_input
  | 12 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_Program 
    | 3 -> NONTERM_Program 
    | 4 -> NONTERM_HeaderList 
    | 5 -> NONTERM_Header 
    | 6 -> NONTERM_Header 
    | 7 -> NONTERM_Header 
    | 8 -> NONTERM_Include 
    | 9 -> NONTERM_Literal 
    | 10 -> NONTERM_Literal 
    | 11 -> NONTERM_Literal 
    | 12 -> NONTERM_Literal 
    | 13 -> NONTERM_DefinitionList 
    | 14 -> NONTERM_Definition 
    | 15 -> NONTERM_Definition 
    | 16 -> NONTERM_Const 
    | 17 -> NONTERM_TypeDefinition 
    | 18 -> NONTERM_CommaOrSemicolonOptional 
    | 19 -> NONTERM_CommaOrSemicolonOptional 
    | 20 -> NONTERM_CommaOrSemicolonOptional 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 14 
let _fsyacc_tagOfErrorTerminal = 12

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | CONST  -> "CONST" 
  | SEMICOLON  -> "SEMICOLON" 
  | COMMA  -> "COMMA" 
  | NAMESPACE  -> "NAMESPACE" 
  | INCLUDE  -> "INCLUDE" 
  | LITERAL _ -> "LITERAL" 
  | DECIMAL _ -> "DECIMAL" 
  | BOOL _ -> "BOOL" 
  | NUMBER _ -> "NUMBER" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | CONST  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | NAMESPACE  -> (null : System.Object) 
  | INCLUDE  -> (null : System.Object) 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DECIMAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMBER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 0us; 4us; 1us; 65535us; 6us; 7us; 1us; 65535us; 6us; 8us; 0us; 65535us; 1us; 65535us; 4us; 5us; 1us; 65535us; 14us; 15us; 1us; 65535us; 14us; 16us; 1us; 65535us; 14us; 17us; 2us; 65535us; 4us; 6us; 5us; 14us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 12us; 14us; 16us; 18us; 20us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 2us; 3us; 13us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 8us; 1us; 8us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 18us; 1us; 19us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; |]
let _fsyacc_action_rows = 20
let _fsyacc_actionTableElements = [|1us; 32768us; 0us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16404us; 2us; 16387us; 2us; 19us; 3us; 18us; 0us; 16391us; 0us; 16388us; 0us; 16389us; 0us; 32768us; 0us; 32768us; 0us; 16390us; 0us; 32768us; 0us; 16392us; 0us; 16400us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16402us; 0us; 16403us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 4us; 5us; 6us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 2us; 3us; 1us; 3us; 0us; 2us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 0us; 0us; 1us; 1us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 4us; 4us; 4us; 5us; 6us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 11us; 11us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 65535us; 65535us; 65535us; 16388us; 16389us; 65535us; 65535us; 16390us; 65535us; 16392us; 65535us; 16397us; 16398us; 16399us; 16402us; 16403us; |]
let _fsyacc_reductions ()  =    [| 
# 162 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Ast.Program option)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 171 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "ThriftParse.fsy"
                                      _1 
                   )
# 25 "ThriftParse.fsy"
                 : Ast.Program option));
# 182 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "ThriftParse.fsy"
                                 None 
                   )
# 28 "ThriftParse.fsy"
                 : 'Program));
# 192 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'HeaderList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DefinitionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "ThriftParse.fsy"
                                                       Some { Headers = :ist.rev _1; Definitions = List.rev _2 } 
                   )
# 29 "ThriftParse.fsy"
                 : 'Program));
# 204 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'HeaderList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CommaOrSemicolonOptional)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Header)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "ThriftParse.fsy"
                                                                        _2::_1 
                   )
# 32 "ThriftParse.fsy"
                 : 'HeaderList));
# 217 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Include)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "ThriftParse.fsy"
                                     IncludeHeader _1 
                   )
# 35 "ThriftParse.fsy"
                 : 'Header));
# 228 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "ThriftParse.fsy"
                                             Namespace (NamespaceScope.Other _1,Identifier _2) 
                   )
# 36 "ThriftParse.fsy"
                 : 'Header));
# 240 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "ThriftParse.fsy"
                            
                   )
# 37 "ThriftParse.fsy"
                 : 'Header));
# 250 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "ThriftParse.fsy"
                                            Include StringLiteral _1 
                   )
# 40 "ThriftParse.fsy"
                 : 'Include));
# 261 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "ThriftParse.fsy"
                                    StringLiteral _1
                   )
# 43 "ThriftParse.fsy"
                 : 'Literal));
# 272 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "ThriftParse.fsy"
                                    NumericLiteral _1 
                   )
# 44 "ThriftParse.fsy"
                 : 'Literal));
# 283 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "ThriftParse.fsy"
                                  BoolLiteral _1 
                   )
# 45 "ThriftParse.fsy"
                 : 'Literal));
# 294 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : decimal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "ThriftParse.fsy"
                                     DecimalLiteral _1 
                   )
# 46 "ThriftParse.fsy"
                 : 'Literal));
# 305 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'DefinitionList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CommaOrSemicolonOptional)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ThriftParse.fsy"
                                                                                _2::_1 
                   )
# 49 "ThriftParse.fsy"
                 : 'DefinitionList));
# 318 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ThriftParse.fsy"
                                   ConstDefinition _1 
                   )
# 52 "ThriftParse.fsy"
                 : 'Definition));
# 329 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypeDefinition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "ThriftParse.fsy"
                                            TypeDefinition _1 
                   )
# 53 "ThriftParse.fsy"
                 : 'Definition));
# 340 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "ThriftParse.fsy"
                            
                   )
# 56 "ThriftParse.fsy"
                 : 'Const));
# 350 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "ThriftParse.fsy"
                            
                   )
# 59 "ThriftParse.fsy"
                 : 'TypeDefinition));
# 360 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "ThriftParse.fsy"
                                  
                   )
# 62 "ThriftParse.fsy"
                 : 'CommaOrSemicolonOptional));
# 370 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "ThriftParse.fsy"
                                      
                   )
# 63 "ThriftParse.fsy"
                 : 'CommaOrSemicolonOptional));
# 380 "ThriftParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "ThriftParse.fsy"
                            
                   )
# 64 "ThriftParse.fsy"
                 : 'CommaOrSemicolonOptional));
|]
# 391 "ThriftParse.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 15;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Ast.Program option =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
