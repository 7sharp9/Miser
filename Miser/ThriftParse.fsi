// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | CONST
  | SEMICOLON
  | COMMA
  | NAMESPACE
  | INCLUDE
  | LITERAL of (string)
  | DECIMAL of (decimal)
  | BOOL of (bool)
  | NUMBER of (int64)
  | ID of (string)
  | STRING of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_CONST
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_NAMESPACE
    | TOKEN_INCLUDE
    | TOKEN_LITERAL
    | TOKEN_DECIMAL
    | TOKEN_BOOL
    | TOKEN_NUMBER
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Program
    | NONTERM_HeaderList
    | NONTERM_Header
    | NONTERM_Include
    | NONTERM_Literal
    | NONTERM_DefinitionList
    | NONTERM_Definition
    | NONTERM_Const
    | NONTERM_TypeDefinition
    | NONTERM_CommaOrSemicolonOptional
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Ast.Program option) 
